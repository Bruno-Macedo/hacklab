//TODOs:
// - Blacklist of data not to sent to chatGPT: IPs, URLs, Names, DNSs, words that we set in a list
// - Radio button for choose model, default gpt-3.5-turbo
// - 

function onOpen() {
    var ui = DocumentApp.getUi();
    var menu = ui.createMenu('docsGPT');

    //menu.addItem('Tone', 'toggleOptions')
    //menu.addSubMenu(ui.createMenu('Writing')
    //    .addItem('Write Paragraph', 'writeEssay')
    //    .addItem('Expand', 'expandText')
    //    .addItem('Expand Thesis', 'thesisExpand')
    //    .addItem('Summarize Text', 'summarizeText'));

    //menu.addSubMenu(ui.createMenu('Research')
    //    .addItem('Find Sources', 'findSources')
    //    .addItem('Research Topic', 'researchTopic'));

    menu.addItem('Answer Question', 'answerQuestion');
    
    menu.addItem('Correct Selection', 'correctText');
    menu.addItem('Print Selection to Alert Box', 'testFunction');
    menu.addItem('Show sidebar', 'showSidebar');

    menu.addToUi();
}

// FIXED VARIABLES. Your API and Model Type
var apiKey = "";

// Models
var GPT_4                 = "gpt-4";
var GPT_4_turbo_prieview  ="gpt-4-turbo-preview";
var GPT_3_5_Turbo         = "gpt-3.5-turbo";

// Prompts
var PromptCorrectText = "The selected text is part of a security assessment report and should be written correctly and in passive voice. It should be easy to understand for management and technical readers in an enterprise. Please, do not mention the question in the answer. Can you please correct and improve the following text: " + "\n";
var PromptFreeQuestion = "Answer the following question in a clear manner, explaining it thoroughly: " + "\n";

// Array for removed words
var RemovedWords = [];

var RemovedIPs = [];
var RemovedURLs =[];

var PlaceHolderIP = "#IP_Address#";
var PlaceHolderURL = "#URLs#";


function showSidebar() {
  var widget = HtmlService.createHtmlOutputFromFile('Buttons')
  .setTitle('AI Automation');
  DocumentApp.getUi().showSidebar(widget);
}

function getSelectedText2() {
    var selection = DocumentApp.getActiveDocument().getSelection();
    var selectedText = "";
    if (selection) {
        var elements = selection.getRangeElements();
        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            // Only modify elements that can be edited as text; skip images and other non-text elements.
            if (element.getElement().asText) {
                // Get the selected part of the element, or the full element if it's completely selected.
                var text = element.getElement().asText().getText();
                if (element.isPartial()) {
                    text = text.slice(element.getStartOffset(), element.getEndOffsetInclusive() + 1);             
                }
                selectedText = selectedText.concat(text, ' ');
            }
        }
    } else {
        DocumentApp.getUi().alert('Nothing is selected.');
    }
    return selectedText;
}

function getSelectedText() {
  var selection = DocumentApp.getActiveDocument().getSelection();
  var selectedText = ""; 

  //var regExpIP = /\b(?:\d{1,3}\.){3}\d{1,3}\b/g;
  //var urlRegex = /(?:(?:https?:\/\/)?(?:www\.)?|(?:www\.))[\w-]+\.[\w-]+(?:\.[\w-]+)*(?:\/[\w~#:\.-]*)*(?:\?[\w\-%=&]*)?(?:#[\w-]*)?/g;

  var regExpIP = /\b(?:\d{1,3}\.){3}\d{1,3}\b/g;
  //var urlRegex = /(?:https?:\/\/)?(?:www\.)?[\w-]+(?:\.[\w-]+)+[\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-]/g;
  //var urlRegex = /(?:(?:https?:\/\/)?(?:www\.)?|(?:www\.))[\w-]+(?:\.[\w-]+)*(?:\/[\w~#:\.-]*)*(?:\?[\w\-%=&]*)?(?:#[\w-]*)?/g;

  var urlRegex = /(?![\d.]+)((?!-))(xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\.(xn--)?([a-z0-9\._-]{1,61}|[a-z0-9-]{1,30})?/g;

  if (selection) {
    var elements = selection.getRangeElements();
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      if (element.getElement().asText) {
        var text = element.getElement().asText().getText();


        if (element.isPartial()) {
          text = text.slice(element.getStartOffset(), element.getEndOffsetInclusive() + 1);             
        }
        selectedText += text;
      }
    }
  } else {
    DocumentApp.getUi().alert('Nothing is selected.');
  }

 // Logger.log("foundWord_Array: " + foundWord);

  var newtext = selectedText.replace(regExpIP, PlaceHolderIP).replace(urlRegex, PlaceHolderURL);

  var ExtractedWords = selectedText.match(urlRegex);

  //RemovedWords.push(selectedText.match(urlRegex));
 // RemovedWords.push(selectedText.match(regExpIP));

  RemovedIPs = selectedText.match(regExpIP);
  RemovedURLs = selectedText.match(urlRegex);

  Logger.log("RemovedIPs: " + RemovedIPs);
  Logger.log("RemovedURLs: " + RemovedURLs);

  RemovedWords = ExtractedWords

  //Logger.log("RemovedWords: " + RemovedWords);

//  for (i = 0; i < RemovedWords.length; i++) {
//    Logger.log("RemovedWords 119: " + RemovedWords[i]);
//  }

  //Logger.log("newtext: " + newtext);

  return newtext;
}

function testFunction(value) {
    //var text = getSelectedText();
    //DocumentApp.getUi().alert('Selected text: ' + text);
    //var randomText = "jkasldgadsf";
    //insertTextAfter(randomText);
    Logger.log("Model: " + value);
}

function generateText(prompt) {
    var Model_ID = model;
    var maxTokens = 64;
    var temperature = 0.5;
    // Build the API payload
    var payload = {
        'messages': [{
            'role': 'user',
            'content': prompt
        }],
        'model': Model_ID, // ID of the model to use
        'n': 1, // How many chat completion choices to generate for each input message. 
        'temperature': temperature, // What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        'max_tokens': maxTokens, // The maximum number of tokens that can be generated in the chat completion.
    };
    var requestOptions = {
        "method": "POST",
        "headers": {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + apiKey
        },
        "payload": JSON.stringify(payload)
    };
    var url = 'https://api.openai.com/v1/chat/completions';
    // Make request to API and get response 
    var response = UrlFetchApp.fetch(url, requestOptions);
    var json = response.getContentText();
    var reponseData = JSON.parse(json);
    var generatedText = reponseData["choices"][0]["message"]["content"];
    // Check if generatedText is defined before calling .trim()
    if (generatedText) {
        generatedText = generatedText.text.trim();
    }
    // Convert the generatedText to plain text
    var plainText = Utilities.formatString("%s", generatedText);
    return plainText;
}

function FindInsertPoint () {
  var theDoc = DocumentApp.getActiveDocument();
  var selection = theDoc.getSelection();

if (selection) {
  var elements = selection.getRangeElements();

  for (var i = 0; i < elements.length; i++) {
    var element = elements[i];
    //Logger.log('element: ' + element.getElement());  
  }

  var theElmt = element;
  var selectedElmt = theElmt.getElement();
  //Logger.log('selectedElmt: ' + selectedElmt);

  var parent = selectedElmt.getParent();
  var insertPoint = parent.getChildIndex(selectedElmt);
  //Logger.log('insertPoint 173: ' + insertPoint);  
  return insertPoint;
  }
}

// We can only select from top to bottom
function insertTextAfterSelection(text) {
  var theDoc = DocumentApp.getActiveDocument();
  //var selection = theDoc.getSelection();
  //Logger.log('selection: ' + selection); 

 // if (selection) {
 //   var elements = selection.getRangeElements();

 //   for (var i = 0; i < elements.length; i++) {
 //     var element = elements[i];
 //     Logger.log('element: ' + element.getElement());  

 //   };
 //   var theElmt = element;
  //  var selectedElmt = theElmt.getElement();
 //   Logger.log('selectedElmt: ' + selectedElmt);

  //  var parent = selectedElmt.getParent();
  //  var insertPoint = parent.getChildIndex(selectedElmt);
 //   Logger.log('insertPoint 147: ' + insertPoint);  

  var insertPoint = FindInsertPoint ();
  var body = theDoc.getBody();
  var newtext = body.insertParagraph(insertPoint + 2, text);

  newtext.
    editAsText().setBackgroundColor('#FFFF00');
    //setAlignment(DocumentApp.HorizontalAlignment.JUSTIFY);
//  };
};

function ChatGPTprompt(question, choosenmodel) {
  selectedText = getSelectedText();
// This was the biggest modification. To use our model and get the result we want, we had to change the the API endpoint to /v1/chat/completions AND write the prompt in a different format.
  var prompt = {
    "messages": [
      {"role": "user", "content": question + selectedText }
    ],

    "temperature": 0.5,
    "max_tokens": 1000,
    "frequency_penalty": 0.4,
    "presence_penalty": 0.4,
    "model": choosenmodel
  };

  var requestOptions = {
    "method": "POST",
    "headers": {
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apiKey
    },
    "payload": JSON.stringify(prompt)
  };

try {
  var response = UrlFetchApp.fetch("https://api.openai.com/v1/chat/completions", requestOptions);
  var responseText = response.getContentText();
  var jsonResponse = JSON.parse(responseText);
  var generatedText = jsonResponse["choices"][0]["message"]["content"];

  // Check if generatedText is defined before calling .trim()
  if (generatedText) {
    generatedText = generatedText.trim();
  }

   } catch (error) {
    Logger.log("Error 171: " + error);
  }
  return generatedText;
}

function correctTextGPT4() {
  generatedText = ChatGPTprompt(PromptCorrectText, GPT_4); 
  Logger.log("generatedText: " + generatedText);
  var BacktoBack = restoreOriginalContent(generatedText);
  insertTextAfterSelection(BacktoBack)
  Logger.log("Text corrected successfully.");
}

function correctTextGPT4_turbo_preview() {
  generatedText = ChatGPTprompt(PromptCorrectText, GPT_4_turbo_prieview); 
  Logger.log("generatedText: " + generatedText);
  var BacktoBack = restoreOriginalContent(generatedText);
  insertTextAfterSelection(BacktoBack)
  Logger.log("Text corrected successfully.");
}

function correctTextGPT3_5Turbo() {
  generatedText = ChatGPTprompt(PromptCorrectText, GPT_3_5_Turbo); 
  Logger.log("generatedText: " + generatedText);
  var BacktoBack = restoreOriginalContent(generatedText);
  Logger.log("BacktoBack: " + BacktoBack);
  insertTextAfterSelection(BacktoBack)
  Logger.log("Text corrected successfully.");
}

function restoreOriginalContent(text) {
  // Replace placeholder tags with original IP addresses

 for (var i = 0; i < RemovedIPs.length; i++) {
    var ipRegex = new RegExp("#IP_Address" + i + "#", "g");
    text = text.replace(PlaceHolderIP, RemovedIPs[i]);
  }

  // Replace placeholder tags with original URLs
  for (var j = 0; j < RemovedURLs.length; j++) {
    var urlRegex = new RegExp("#URLs" + j + "#", "g");
    text = text.replace(PlaceHolderURL, RemovedURLs[j]);
  }
  return text;
}


function answerQuestionGPT4() {
  var selectedText = getSelectedText();
  var generatedText = ChatGPTprompt(PromptFreeQuestion, GPT_4);
  Logger.log("generatedText: " + generatedText);
  insertTextAfterSelection(generatedText)
  Logger.log("Text generated successfully.");
}

function answerQuestionGPT4_turbo_preview() {
  var selectedText = getSelectedText();
  var generatedText = ChatGPTprompt(PromptFreeQuestion, GPT_4_turbo_prieview);
  Logger.log("generatedText: " + generatedText);
  insertTextAfterSelection(generatedText)
  Logger.log("Text generated successfully.");
}

function answerQuestionGPT3_5() {
  var selectedText = getSelectedText();
  var generatedText = ChatGPTprompt(PromptFreeQuestion, GPT_3_5_Turbo);
  Logger.log("generatedText: " + generatedText);
  insertTextAfterSelection(generatedText)
  Logger.log("Text generated successfully.");
}

function CodeBlock() {
  var theDoc = DocumentApp.getActiveDocument();
  var selection = theDoc.getSelection();

  var selectedText = getSelectedText();

  if (selection) {
    var elements = selection.getRangeElements();

    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
     //Logger.log('element: ' + element.getElement());  
    };
    var theElmt = element;
    var selectedElmt = theElmt.getElement();
    //Logger.log('selectedElmt: ' + selectedElmt);

    var parent = selectedElmt.getParent();
    var insertPoint = parent.getChildIndex(selectedElmt);
    Logger.log('insertPoint 292: ' + insertPoint);  

    var body = theDoc.getBody();

      // Create table
    var table = body.insertTable(insertPoint + 1);
    //var table = body.appendTable();
    var row = table.appendTableRow();
    var cell = row.appendTableCell();

    var newtext = cell.appendParagraph(selectedText);

    newtext.
      editAsText().setFontFamily("Courier").setFontSize(10); 
  Logger.log("selectedText: " + newtext.asText());
  }
}

function CodeBlockJIRA() {
  var theDoc = DocumentApp.getActiveDocument();
  var body = theDoc.getBody();
  //var selection = theDoc.getSelection();

  var JiraCodeTag = "{noformat}"
  var selectedText = getSelectedText();
  var newtextFormated = JiraCodeTag + "\n" + selectedText + "\n" + JiraCodeTag;
  var insertPoint = FindInsertPoint();

  var newtext = body.insertParagraph(insertPoint + 2, newtextFormated);

  newtext.
    editAsText().setFontFamily("Courier").setFontSize(10);
}


function processSelectedOption(option) {
    Logger.log("Option received: " + option);
    // Process the selected option here
}

<!DOCTYPE html>
<html>
  <style>
   .container {
      display: block;
      justify-content: center;
      align-items: center;
      height: 15vh; /* Make the container full height of the viewport */
    }

    .btn-group {
      text-align: center; /* Align buttons within the group to the center */
      margin-top: 20px;
      border: 1px solid #ccc; /* Thin border */
      padding: 10px;
    }

    .btn-group:first-child {
      margin-right: 10px;
    }

    .btn-group button {
      background-color: #04AA6D; /* Green background */
      border: 1px solid green; /* Green border */
      color: white; /* White text */
      padding: 10px 10px; /* Some padding */
      cursor: pointer; /* Pointer/hand icon */
      display: block; /* Make the buttons appear below each other */
      width: 100%;
      table-layout: fixed;
    }

    .btn-group button:not(:last-child) {
      border-bottom: none; /* Prevent double borders */
    }

    /* Add a background color on hover */
    .btn-group button:hover {
      background-color: #3e8e41;
    }

    .center {
      margin: auto;
      width: 60%;
      border: none;
      padding: 1px;
    }

    .button1 {
        margin-bottom: 10px;
    }

    h4 {
    margin-top: 0;
}

  </style>
  <head>
    <base target="_top">

<script>
    function submitOption() {
        var form = document.getElementById('myForm');
        var formData = new FormData(form);
        var selectedOption = formData.get('option');

        console.log("Selected Option: " + selectedOption);

        google.script.run.withSuccessHandler(function(response) {
            console.log("Option selected: " + response);
        }).processSelectedOption(selectedOption);
    }


</script>

  </head>
  <body>
    <div class="center">
      <h2>Walldomator<h2>
    </div>
    <div class="container">
        <div class="btn-group">
            <div class="center">
                <b><small>Correct selection</small></b>
                <div class="button1">
                    <button onclick="google.script.run.correctTextGPT4();" title="A set of models that improve on GPT-3.5 and can understand as well as generate natural language or code.">Correct selection with model <b>GPT-4</b></button>
                </div>
                <div class="button1">
                    <button onclick="google.script.run.correctTextGPT4_turbo_preview();" title="The latest GPT-4 model intended to reduce cases of “laziness” where the model doesn’t complete a task. Returns a maximum of 4,096 output tokens.">Correct selection with model <b>GPT-4-Turbo-Preview</b></button>
                </div>
                <div class="button1">
                    <button onclick="google.script.run.correctTextGPT3_5Turbo();" title="A set of models that improve on GPT-3.5 and can understand as well as generate natural language or code">Correct selection with model <b>GTP-3.5-Turbo</b></button>
                </div>
            </div>
        </div>

        <div class="btn-group">
            <div class="center">
                <b><small>Answer question</small></b>
                <div class="button1">
                    <button onclick="google.script.run.answerQuestionGPT4();" >Answer the selected question with model <b>GTP-4</b></button>
                </div>
                <div class="button1">
                    <button onclick="google.script.run.answerQuestionGPT4_turbo_preview();">Answer the selected question with model <b>GPT-4-Turbo-Preview</b> </button>
                </div>
                <div class="button1">
                    <button onclick="google.script.run.answerQuestionGPT3_5();">Answer the selected question with model <b>GTP-3.5-Turbo</b> </button>
                </div>
            </div>
        </div>

         <div class="btn-group">
            <div class="center">
                <b> Format selection to code block</b>
                <div class="button1">
                    <button onclick="google.script.run.CodeBlock();" title="Code block inside a table.">Code block</button>
                </div>
                <div class="button1">
                    <button onclick="google.script.run.CodeBlockJIRA();" title="Code block for JIRA markdown.">Code block for Jira</button>
                </div>
            </div>
        </div>

        <button onclick="google.script.host.close();">Close</button>
    </div>



  </body>
</html>





