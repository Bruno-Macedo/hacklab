//TODOs:
// - Blacklist of data not to sent to chatGPT: IPs, URLs, Names, DNSs, words that we set in a list => Done with IP/URLS
// - Radio button for choose model, default gpt-3.5-turbo => Done with button, radio was not possible
// - 


// Global variables that across the code are used
var ui = DocumentApp.getUi();
var doc = DocumentApp.getActiveDocument();
var selection = DocumentApp.getActiveDocument().getSelection();
var body = doc.getBody();

function onOpen() {
  var menu = ui.createMenu('docsGPT');
  menu.addItem('Answer Question', 'answerQuestionGPT3_5');
  menu.addItem('Correct Selection', 'correctTextGPT3_5Turbo');
  menu.addItem('Show sidebar', 'showSidebar');
  menu.addToUi();
}

// FIXED VARIABLES. Your API and Model Type
var apiKey = "";

// Models
var GPT_4                 = "gpt-4";
var GPT_4_turbo_prieview  ="gpt-4-turbo-preview";
var GPT_3_5_Turbo         = "gpt-3.5-turbo";

// Prompts
var PromptCorrectText = "The selected text is part of a security assessment report and should be written correctly and in passive voice. It should be easy to understand for management and technical readers in an enterprise. Please, do not mention the question in the answer. Can you please correct and improve the following text: " + "\n";
var PromptFreeQuestion = "Answer the following question in a clear manner, explaining it thoroughly: " + "\n";

// Variables to filter and Remove words
var RemovedWords         = [];
var RemovedIPs           = [];
var RemovedURLs          = [];
var RemovedEmails        = [];
var PlaceHolderIP        = "#IP_Address#";
var PlaceHolderURL       = "#URLs#";
var PlaceHolderEmail     = "#Email-Address#";
var regExpIP             = /\b(?:\d{1,3}\.){3}\d{1,3}\b/g;
var urlRegex             = /(?![\d.]+)((?!-))(xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\.(xn--)?([a-z0-9\._-]{1,61}|[a-z0-9-]{1,30})?/g;
var regExpEmail          = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/g;

function showSidebar() {
  var html = HtmlService.createTemplateFromFile('Buttons.html');
  html.current_doc_url = doc.getUrl();            // Pass default URL for "this" document
  var rendered = html.evaluate()
    .setTitle('Walldomator')
    .setWidth(300);

  ui.showSidebar(rendered);

  //var doc = DocumentApp.getActiveDocument();
  //var widget = HtmlService.createHtmlOutputFromFile('Buttons')
  //.setTitle('AI Automation');
  //widget.current_doc_url = doc.getUrl();
  //DocumentApp.getUi().showSidebar(widget);
}

function DeleteSelection() {
  // the way to handle a selection
  // from the official documentation
  // https://developers.google.com/apps-script/reference/document/range
  var selection = DocumentApp.getActiveDocument().getSelection();
  if (selection) {
    var elements = selection.getRangeElements();
    for (let element of elements) {
      if (element.getElement().editAsText) {
        var text = element.getElement().editAsText();
        if (element.isPartial()) {
          text.deleteText(element.getStartOffset(), element.getEndOffsetInclusive());
        } else {
          text.setText(''); // not sure about this line
        }
      }
    }
  } 
}

function getSelectedText2() {
  //var selection = DocumentApp.getActiveDocument().getSelection();
  var selectedText = "";
  if (selection) {
    var elements = selection.getRangeElements();
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      // Only modify elements that can be edited as text; skip images and other non-text elements.
      if (element.getElement().asText) {
      // Get the selected part of the element, or the full element if it's completely selected.
        var text = element.getElement().asText().getText();
        if (element.isPartial()) {
          text = text.slice(element.getStartOffset(), element.getEndOffsetInclusive() + 1);             
        }
        selectedText = selectedText.concat(text, ' ');
      }
    }
  } else {
      DocumentApp.getUi().alert('Nothing is selected.');
  }
  return selectedText;
}

function getSelectedText() {
//  var selection = DocumentApp.getActiveDocument().getSelection();
  var selectedText = ""; 

  if (selection) {
    var elements = selection.getRangeElements();
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      if (element.getElement().asText) {
        var text = element.getElement().asText().getText();

        if (element.isPartial()) {
          text = text.slice(element.getStartOffset(), element.getEndOffsetInclusive() + 1);             
        }
        selectedText += text;
      }
    }
  } else {
    DocumentApp.getUi().alert('Nothing is selected.');
  }
  return selectedText;
}

function maskIPURL(selectedText) {
  var newtext = selectedText.replace(regExpIP, PlaceHolderIP).replace(urlRegex, PlaceHolderURL).replace(regExpEmail, PlaceHolderEmail);
  var ExtractedWords = selectedText.match(urlRegex);
  RemovedIPs = selectedText.match(regExpIP);
  RemovedURLs = selectedText.match(urlRegex);
  RemovedEmails = selectedText.match(regExpEmail);
  Logger.log("RemovedIPs: " + RemovedIPs);
  Logger.log("RemovedURLs: " + RemovedURLs);
  RemovedWords = ExtractedWords;
  return newtext;
}

function testFunction(value) {
    //var text = getSelectedText();
    //DocumentApp.getUi().alert('Selected text: ' + text);
    //var randomText = "jkasldgadsf";
    //insertTextAfter(randomText);
    Logger.log("Model: " + value);
}

function generateText(prompt) {
  var Model_ID = model;
  var maxTokens = 64;
  var temperature = 0.5;
  // Build the API payload
  var payload = {
    'messages': [{
    'role': 'user',
    'content': prompt
    }],
    'model': Model_ID, // ID of the model to use
    'n': 1, // How many chat completion choices to generate for each input message. 
    'temperature': temperature, // What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    'max_tokens': maxTokens, // The maximum number of tokens that can be generated in the chat completion.
  };
  var requestOptions = {
    "method": "POST",
    "headers": {
    "Content-Type": "application/json",
    "Authorization": "Bearer " + apiKey
  },
  "payload": JSON.stringify(payload)
  };

  var url = 'https://api.openai.com/v1/chat/completions';
  // Make request to API and get response 
  var response = UrlFetchApp.fetch(url, requestOptions);
  var json = response.getContentText();
  var reponseData = JSON.parse(json);
  var generatedText = reponseData["choices"][0]["message"]["content"];
  // Check if generatedText is defined before calling .trim()
  if (generatedText) {
      generatedText = generatedText.text.trim();
  }
  // Convert the generatedText to plain text
  var plainText = Utilities.formatString("%s", generatedText);
  return plainText;
}

function FindInsertPoint () {
  if (selection) {
    var elements = selection.getRangeElements();

    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      //Logger.log('element: ' + element.getElement());  
    }

    var theElmt = element;
    var selectedElmt = theElmt.getElement();
    //Logger.log('selectedElmt: ' + selectedElmt);

    var parent = selectedElmt.getParent();
    var insertPoint = parent.getChildIndex(selectedElmt);
    //Logger.log('insertPoint 173: ' + insertPoint);  
  return insertPoint;
  }
}

// We can only select from top to bottom
function insertTextAfterSelection(text) {
  //var theDoc = DocumentApp.getActiveDocument();
  var insertPoint = FindInsertPoint ();
  //var body = doc.getBody();
  var newtext = body.insertParagraph(insertPoint + 1, text);

  newtext.
    editAsText().setBackgroundColor('#FFFF00');
    //setAlignment(DocumentApp.HorizontalAlignment.JUSTIFY);
};

function ChatGPTprompt(question, choosenmodel) {
  var selectedText = getSelectedText();
  var TextToSentToGPT = maskIPURL(selectedText);

  Logger.log("TextToSentToGPT: " + TextToSentToGPT);
 
// This was the biggest modification. To use our model and get the result we want, we had to change the the API endpoint to /v1/chat/completions AND write the prompt in a different format.
  var prompt = {
    "messages": [
      {"role": "user", "content": question + TextToSentToGPT }
    ],

    "temperature": 0.5,
    "max_tokens": 1000,
    "frequency_penalty": 0.4,
    "presence_penalty": 0.4,
    "model": choosenmodel
  };

  var requestOptions = {
    "method": "POST",
    "headers": {
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apiKey
    },
    "payload": JSON.stringify(prompt)
  };

try {
  var response = UrlFetchApp.fetch("https://api.openai.com/v1/chat/completions", requestOptions);
  var responseText = response.getContentText();
  var jsonResponse = JSON.parse(responseText);
  var generatedText = jsonResponse["choices"][0]["message"]["content"];

  // Check if generatedText is defined before calling .trim()
  if (generatedText) {
    generatedText = generatedText.trim();
  }

   } catch (error) {
    Logger.log("Error 171: " + error);
  }
  return generatedText;
}

function correctTextGPT4() {
  generatedText = ChatGPTprompt(PromptCorrectText, GPT_4); 
  //Logger.log("generatedText: " + generatedText);
  var BacktoBack = restoreOriginalContent(generatedText);
  insertTextAfterSelection(BacktoBack)
  //Logger.log("Text corrected successfully.");
}

function correctTextGPT4_turbo_preview() {
  generatedText = ChatGPTprompt(PromptCorrectText, GPT_4_turbo_prieview); 
  //Logger.log("generatedText: " + generatedText);


  var BacktoBack = restoreOriginalContent(generatedText);
  insertTextAfterSelection(BacktoBack)
  //Logger.log("Text corrected successfully.");
}

function correctTextGPT3_5Turbo() {
  generatedText = ChatGPTprompt(PromptCorrectText, GPT_3_5_Turbo); 
  //Logger.log("generatedText: " + generatedText);

  Logger.log("RemovedIPs: " + RemovedIPs)
  Logger.log("RemovedURLs: " + RemovedURLs)

  var BacktoBack = restoreOriginalContent(generatedText);
  //Logger.log("BacktoBack: " + BacktoBack);
  insertTextAfterSelection(BacktoBack)
  //Logger.log("Text corrected successfully.");
}

function restoreOriginalContent(text) {
  // Replace placeholder tags with original IP addresses

  if (RemovedIPs != null) {
    for (var i = 0; i < RemovedIPs.length; i++) {
    var ipRegex = new RegExp("#IP_Address" + i + "#", "g");
    text = text.replace(PlaceHolderIP, RemovedIPs[i]);
    }
  }

  // Replace placeholder tags with original URLs
  if (RemovedURLs != null) {
    for (var j = 0; j < RemovedURLs.length; j++) {
      var urlRegex = new RegExp("#URLs" + j + "#", "g");
      text = text.replace(PlaceHolderURL, RemovedURLs[j]);
    }
  }
  return text;
}

function answerQuestionGPT4() {
  var selectedText = getSelectedText();
  var generatedText = ChatGPTprompt(PromptFreeQuestion, GPT_4);
  //Logger.log("generatedText: " + generatedText);
  insertTextAfterSelection(generatedText)
  Logger.log("Text generated successfully.");
}

function answerQuestionGPT4_turbo_preview() {
  var selectedText = getSelectedText();
  var generatedText = ChatGPTprompt(PromptFreeQuestion, GPT_4_turbo_prieview);
  //Logger.log("generatedText: " + generatedText);
  insertTextAfterSelection(generatedText)
  Logger.log("Text generated successfully.");
}

function answerQuestionGPT3_5() {
  var selectedText = getSelectedText();
  var generatedText = ChatGPTprompt(PromptFreeQuestion, GPT_3_5_Turbo);
  //Logger.log("generatedText: " + generatedText);
  insertTextAfterSelection(generatedText)
  Logger.log("Text generated successfully.");
}

function CodeBlock() {
  //var doc = DocumentApp.getActiveDocument();
 // var selection = doc.getSelection();

  var selectedText = getSelectedText();

  if (selection) {
    var elements = selection.getRangeElements();

    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
     //Logger.log('element: ' + element.getElement());  
    };
    var theElmt = element;
    var selectedElmt = theElmt.getElement();
    //Logger.log('selectedElmt: ' + selectedElmt);

    var parent = selectedElmt.getParent();
    var insertPoint = parent.getChildIndex(selectedElmt);
    Logger.log('insertPoint 292: ' + insertPoint);  

    //var body = doc.getBody();

      // Create table
    var table = body.insertTable(insertPoint + 1);
    //var table = body.appendTable();
    var row = table.appendTableRow();
    var cell = row.appendTableCell();

    var newtext = cell.appendParagraph(selectedText);
    newtext.
      editAsText().setFontFamily("Courier").setFontSize(10); 
  //Logger.log("selectedText: " + newtext.asText());

  DeleteSelection();
  }
}

function CodeBlockJIRA() {
  //var theDoc = DocumentApp.getActiveDocument();
  //var body = theDoc.getBody();
  //var selection = theDoc.getSelection();

  var JiraCodeTag = "{noformat}"
  var selectedText = getSelectedText();
  var newtextFormated = JiraCodeTag + "\n" + selectedText + "\n" + JiraCodeTag;
  var insertPoint = FindInsertPoint();

  var newtext = body.insertParagraph(insertPoint + 2, newtextFormated);

  newtext.
    editAsText().setFontFamily("Courier").setFontSize(10);

  DeleteSelection();
}

function processForm(url) {
  Logger.log("Selected option: " + url);
}

<!DOCTYPE html>
<html>
  <style>
    .container {
      display: block;
      justify-content: center;
      align-items: center;
      height: 15vh; /* Make the container full height of the viewport */
    }

    .btn-group {
      text-align: center; /* Align buttons within the group to the center */
      margin-top: 20px;
      border: 1px solid #ccc; /* Thin border */
      padding: 10px;
    }

    .btn-group:first-child {
      margin-right: 10px;
    }

    .btn-group button {
      background-color: #04AA6D; /* Green background */
      border: 1px solid green; /* Green border */
      color: white; /* White text */
      padding: 10px 10px; /* Some padding */
      cursor: pointer; /* Pointer/hand icon */
      display: block; /* Make the buttons appear below each other */
      width: 100%;
      table-layout: fixed;
    }

    .btn-group button:not(:last-child) {
      border-bottom: none; /* Prevent double borders */
    }

    /* Add a background color on hover */
    .btn-group button:hover {
      background-color: #3e8e41;
    }

    .center {
      margin: auto;
      width: 80%;
      border: none;
      padding: 1px;
    }

    .button1 {
      margin-bottom: 10px;
    }

    h4 {
      margin-top: 0;
    }

    input[type="radio"] {
      margin-right: 1px; /* Add some spacing between the radio button and its label */
      margin-bottom: 1px;
      font-size: smaller; /* Reduce font size */
      display:  inline-block;; /* Display radio buttons inline */
    }

    label {
      font-size: 14px; /* Smaller font size for labels */
      display: block;
    }

    .radio-options label {
      display: inline-block; /* Display labels inline */
      margin-right: 15px; /* Add spacing between labels */
    }
    
    .radio-options {
      text-align: left; /* Align radio options to the left */
      margin-top: 0p;
    }
    .close-button {
      display: block;
      margin-top: 20px;
      text-align: center;
    }

    #closeBtn {
      background-color: #f44336;
      border: 1px solid #f44336;
    }

    #closeBtn:hover {
      background-color: #da190b;
    }
    
  </style>
  <head>
    <base target="_top">

   <script>
    document.querySelector("#params#").addEventListener("submit",#04AA6D
    function(e)
    {
      e.preventDefault();    //stop form from submitting
      google.script.run.processSelectedOption(this);
      google.script.host.close();//close this dialogbox
    }
    );

      javascript
      function getSelectedValue() {
          var radios = document.getElementsByName('RadioOption');
          
          for(var i = 0; i < radios.length; i++) {
              if(radios[i].checked) {
                  alert("You selected: " + radios[i].value);
                  break;
              }
          }
      }

      function submitForm() {
        var form = document.getElementById('myForm');
        var url = form.elements['RadioOption'].value;
        google.script.run.processForm(url);
      }


    </script>

  </head>
  <body>
    <div class="center">
      <!-- <h2>Walldomator</h2>-->
    </div>

    <div class="container">
      <!-- Group 1: Correct Selection Buttons -->
      <div class="btn-group">
        <div class="center">
          <b>Correct selection</b>
          <div class="button1">
            <button onclick="google.script.run.correctTextGPT4();" title="A set of models that improve on GPT-3.5 and can understand as well as generate natural language or code.">Correct selection with model <b>GPT-4</b></button>
          </div>
          <!--  //We leave this model commented, since it is preview
          <div class="button1">
            <button onclick="google.script.run.correctTextGPT4_turbo_preview();" title="The latest GPT-4 model intended to reduce cases of “laziness” where the model doesn’t complete a task. Returns a maximum of 4,096 output tokens.">Correct selection with model <b>GPT-4-Turbo-Preview</b></button>
          </div>
          -->
          <div class="button1">
            <button onclick="google.script.run.correctTextGPT3_5Turbo();" title="A set of models that improve on GPT-3.5 and can understand as well as generate natural language or code">Correct selection with model <b>GTP-3.5-Turbo</b></button>
          </div>
        </div>
      </div>

      <!-- Group 2: Answer Question Buttons -->
      <div class="btn-group">
        <div class="center">
          <b>Answer question</b>
          <div class="button1">
            <button onclick="google.script.run.answerQuestionGPT4();" >Answer the selected question with model <b>GTP-4</b></button>
          </div>
          <!--  //We leave this model commented, since it is preview
          <div class="button1">
            <button onclick="google.script.run.answerQuestionGPT4_turbo_preview();">Answer the selected question with model <b>GPT-4-Turbo-Preview</b> </button>
          </div>
          -->
          <div class="button1">
            <button onclick="google.script.run.answerQuestionGPT3_5();">Answer the selected question with model <b>GTP-3.5-Turbo</b> </button>
          </div>
        </div>
      </div>

      <!-- Group 3: Format Selection Buttons -->
      <div class="btn-group">
        <div class="center">
          <b> Format selection to code block</b>
          <div class="button1">
            <button onclick="google.script.run.CodeBlock();" title="Code block inside a table.">Code block</button>
          </div>
          <div class="button1">
            <button onclick="google.script.run.CodeBlockJIRA();" title="Code block for JIRA markdown.">Code block for Jira</button>
          </div>
        </div>
      </div>

       <!-- Group 4: GPT Model Selection Form -->
      <div class="btn-group">
        <div class="center radio-options">
          <br>Please, select a GPT model:</br>
          <form id="myForm" onsubmit="submitOption()">
            <input type="radio" id="gpt34" name="RadioOption" value="gpt-3.5-turbo" checked>
            <label for="gpt-3.5-turbo">GPT-3.5 Turbo</label><br>
            <input type="radio" id="gpt4" name="RadioOption" value="gpt-4">
            <label for="gpt-4">GPT-4</label><br>
            <input type="submit" value="Submit">
          </form>
        </div>
      </div>
         <div class="close-button">
          <button id="closeBtn" class="btn" onclick="google.script.host.close();">Close</button>
         </div>
    </div>
  </body>
</html>


<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Options</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        select, input[type="number"] {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        input[type="submit"] {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
<div class="container mt-5">
    <form id="taskOptions">
        <div class="mb-3">
            <label for="task" class="form-label">Task</label>
            <select id="task" name="task" class="form-select">
                <option value="generateRecommendations">Generate Recommendations</option>
                <option value="answerQuestion">Answer Question</option>
                <option value="correctText">Correct Text</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="model" class="form-label">GPT-Model</label>
            <select id="model" name="model" class="form-select">
                <option value="gpt-3.5-turbo" selected>GPT-3.5-Turbo</option>
                <option value="gpt-4">GPT-4</option>
                <option value="gpt-4-turbo-preview">GPT-4-Turbo-Preview</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="maxTokens" class="form-label">Max Tokens:</label>
            <input type="range" class="form-range" id="maxTokens" name="maxTokens" min="1" max="10" oninput="this.nextElementSibling.value = this.value">
            <output>5</output>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>
<script> 
document.getElementById('taskOptions')
    .addEventListener('submit', function(buttonEvent) {
            buttonEvent.preventDefault();
            let task = document.getElementById('task').value;
            let model = document.getElementById('model').value;
            let maxTokens = document.getElementById('maxTokens').value;
            google.script.run.generateRecommendations()
            if (task === 'generateRecommendations') 
                google.script.run.generateRecommendations(model);
            else if (task === 'answerQuestion') 
                google.script.run.answerQuestion(model);
            else if (task === 'correctText') 
                google.script.run.correctText(model);
    })
  </script>
</body>
</html>